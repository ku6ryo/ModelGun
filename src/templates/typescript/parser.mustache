// This file is auto-generated by ModelGun code generator.
// https://github.com/ku6ryo/ModelGun
// PLEASE DO NOT EDIT. If you want to extend the functionality, please import
// the export members and use as a part or inherit class.

import {{class}} from "./{{class}}"
{{#props}}
{{#importFilePath}}
import {{type}} from "{{{importFilePath}}}"
import parse{{type}} from "{{{importFilePath}}}.parser"
{{/importFilePath}}
{{/props}}

export class ParseError extends Error {
  constructor (message: string) {
    super("parse{{class}} ParseError: " + message)
  }
}

export default function parse{{class}} (data: any) {
  if (typeof data !== "object") {
    throw new ParseError("Given data is not an object.")
  }
  {{#props}}
  {{#importFilePath}}
  {{#isArray}}
  const tmp_{{name}} = data["{{name}}"]
  if (!Array.isArray(tmp_{{name}})) {
    throw new ParseError("{{name}} is not an array")
  }
  const {{name}}: {{type}}[] = tmp_{{name}}.map((item, i) => {
    if (typeof item !== "object") {
      throw new ParseError(`Item of {{name}} with index ${i} is not a object.`)
    }
    return parse{{type}}(item)
  })
  {{/isArray}}
  {{^isArray}}
  const {{name}}: {{type}} = parse{{type}}(data["{{name}}"])
  {{/isArray}}
  {{/importFilePath}}
  {{^importFilePath}}
  const {{name}}: {{type}} = data["{{name}}"]
  {{#isArray}}
  if (!Array.isArray({{name}})) {
    throw new ParseError("{{name}} is not an array")
  }
  for (let i = 0; i < {{name}}.length; i++) {
    if ({{name}}[i] !== "{{type}}") {
      throw new ParseError(`Item of {{name}} with index ${i} is not a {{type}}.`)
    }
  }
  {{/isArray}}
  {{^isArray}}
  if (typeof {{name}} !== "{{type}}") {
    throw new ParseError("{{name}} is not a {{type}}")
  }
  {{/isArray}}
  {{/importFilePath}}
  {{/props}}
  return new {{class}}(
  {{#props}}
    {{name}},
  {{/props}}
  )
}
