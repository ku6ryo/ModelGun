import {{class}}, { UnexpectedNullError, InvalidPropertyError, } from "./{{class}}"
{{#fields}}
{{#importFilePath}}
import {{type}} from "{{{importFilePath}}}"
import parse{{type}} from "{{{importFilePath}}}.parser"
{{/importFilePath}}
{{/fields}}

export class ParseError extends Error {
  constructor (message: string) {
    super("parse{{class}} TypeError: " + message)
  }
}

export default function parse{{class}} (data: any) {
  if (typeof data !== "object") {
    throw new ParseError("Given data is not an object.")
  }
  {{#fields}}
  {{#importFilePath}}
  const {{name}}: {{type}} = parse{{type}}(data["{{name}}"])
  {{/importFilePath}}
  {{^importFilePath}}
  const {{name}}: {{type}} = data["{{name}}"]
  if (typeof {{name}} !== "{{type}}") {
    throw new ParseError("{{name}} is not a {{type}}")
  }
  {{/importFilePath}}
  {{/fields}}
  return new {{class}}(
  {{#fields}}
    {{name}},
  {{/fields}}
  )
}
