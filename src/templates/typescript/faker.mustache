// This file is auto-generated by ModelGun code generator.
// https://github.com/ku6ryo/ModelGun
// PLEASE DO NOT EDIT. If you want to extend the functionality, please import
// the export members and use as a part or inherit class.

import faker from "faker"
import {{class}} from "./{{class}}.model"
{{#props}}
{{#isModel}}
import {{type}} from "{{{modelImportPath}}}.model"
import fake{{type}} from "{{{modelImportPath}}}.faker"
{{/isModel}}
{{/props}}

export class FakeError extends Error {
  constructor (message: string) {
    super("fake{{class}} FakeError: " + message)
  }
}

export default function fake{{class}} (data?: any): {{class}} {
  if (data && typeof data !== "object") {
    throw new FakeError("Given data is not an object. " + String(data))
  }
  {{#props}}
  {{#isModel}}
  {{#isArray}}
  const tmp_{{name}} = data["{{name}}"]
  let {{name}}: {{type}}[] = []
  if (tmp_{{name}}) {
    if (!Array.isArray(tmp_{{name}})) {
      throw new FakeError("{{name}} is not an array")
    }
    {{name}} = tmp_{{name}}.map((item, i) => {
      if (typeof item !== "object") {
        throw new FakeError(`Item of {{name}} with index ${i} is not a object.`)
      }
      return fake{{type}}(item)
    })
  }
  {{/isArray}}
  {{^isArray}}
  const {{name}}: {{type}} = fake{{type}}(data["{{name}}"])
  {{/isArray}}
  {{/isModel}}
  {{^isModel}}
  {{#isArray}}
  const {{name}}: {{type}} = data["{{name}}"] || []
  if (!Array.isArray({{name}})) {
    throw new FakeError("{{name}} is not an array")
  }
  for (let i = 0; i < {{name}}.length; i++) {
    if (typeof {{name}}[i] !== "{{type}}") {
      throw new ParseError(`Item of {{name}} with index ${i} is not a {{type}}.`)
    }
  }
  {{/isArray}}
  {{^isArray}}
  const {{name}}: {{type}} = data["{{name}}"] || faker.{{faker}}()
  if (typeof {{name}} !== "{{type}}") {
    throw new FakeError("{{name}} is not a {{type}}")
  }
  {{/isArray}}
  {{/isModel}}
  {{/props}}
  return new {{class}}(
  {{#props}}
    {{name}},
  {{/props}}
  )
}
