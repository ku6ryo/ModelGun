// This file is auto-generated by ModelGun code generator.
// https://github.com/ku6ryo/ModelGun
// PLEASE DO NOT EDIT. If you want to extend the functionality, please import
// the export members and use as a part or inherit class.

import isUuid from "validator/lib/isUuid"

export class UnexpectedNullError extends Error {
  constructor () {
    super("Child UnexpectedNullError: If you see this, generated code by modelgun may be broken.")
  }
}

export class InvalidPropertyError extends Error {
  constructor (message: string) {
    super("Child InvalidPropertyError: " + message)
  }
}

/**
 * Child model.
 * Child model of Person model
 */
export default class Child {
  #id: string | null = null
  #name: string | null = null
  #school: string | null = null

  /**
   * @param string id 
   * @param string name 
   * @param string school 
   */
  constructor (
    id: string,
    name: string,
    school: string,
  ) {
    this.setId(id)
    this.setName(name)
    this.setSchool(school)
  }

  /**
   * Gets id
   */
  getId (): string {
    if (this.#id === null) {
      throw new UnexpectedNullError()
    }
    return this.#id
  }

  /**
   * Checks id
   */
  checkId (value: string) {
    if (!isUuid(value)) {
      throw new InvalidPropertyError(`${value} is not UUID value. (Child.setId)`)
    }
  }

  /**
   * Sets id
   * @param value
   */
  setId (value: string) {
    this.checkId(value)
    this.#id = value
  }

  /**
   * Gets name
   */
  getName (): string {
    if (this.#name === null) {
      throw new UnexpectedNullError()
    }
    return this.#name
  }

  /**
   * Checks name
   */
  checkName (value: string) {
  }

  /**
   * Sets name
   * @param value
   */
  setName (value: string) {
    this.checkName(value)
    this.#name = value
  }

  /**
   * Gets school
   */
  getSchool (): string {
    if (this.#school === null) {
      throw new UnexpectedNullError()
    }
    return this.#school
  }

  /**
   * Checks school
   */
  checkSchool (value: string) {
  }

  /**
   * Sets school
   * @param value
   */
  setSchool (value: string) {
    this.checkSchool(value)
    this.#school = value
  }

  /**
   * Clones 
   */
  clone (shallow: boolean) {
    return new Child (
      this.getId(),
      this.getName(),
      this.getSchool(),
    )
  }

  /**
   * Creates an object.
   */
  toObject () {
    return {
      id: this.getId(),
      name: this.getName(),
      school: this.getSchool(),
    }
  }
}
