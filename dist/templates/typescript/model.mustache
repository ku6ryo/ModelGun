// This file is auto-generated by ModelGun code generator.
// https://github.com/ku6ryo/ModelGun
// PLEASE DO NOT EDIT. If you want to extend the functionality, please import
// the export members and use as a part or inherit class.
{{{header}}}
{{#props}}
{{#isModel}}
import {{type}} from "{{{modelImportPath}}}.model"
{{/isModel}}
{{/props}}
{{#hasUuid}}
import isUuid from "validator/lib/isUuid"
{{/hasUuid}}
{{#hasEmail}}
import isEmail from "validator/lib/isEmail"
{{/hasEmail}}
{{#hasUrl}}
import isUrl from "validator/lib/isUrl"
{{/hasUrl}}

export class UnexpectedNullError extends Error {
  constructor () {
    super("{{class}} UnexpectedNullError: If you see this, ModelGun validation may be broken.")
  }
}

export class InvalidPropertyError extends Error {
  constructor (message: string) {
    super("{{class}} InvalidPropertyError: " + message)
  }
}

/**
 * {{class}} model.
 * {{#description}}{{description}}{{/description}}
 */
export default class {{class}} {
  {{#props}}
  #{{name}}: {{type}}{{#isArray}}[]{{/isArray}} | null = null
  {{/props}}

  /**
  {{#props}}
   * @param {{type}}{{#isArray}}[]{{/isArray}} {{name}} {{#description}}{{description}}{{/description}}
  {{/props}}
   */
  constructor (
  {{#props}}
    {{name}}: {{type}}{{#isArray}}[]{{/isArray}},
  {{/props}}
  ) {
  {{#props}}
    this.{{setterName}}({{name}})
  {{/props}}
  }
  {{#props}}

  /**
   * Gets {{name}}
   */
  {{getterName}} (): {{type}}{{#isArray}}[]{{/isArray}} {
    if (this.#{{name}} === null) {
      throw new UnexpectedNullError()
    }
    return this.#{{name}}
  }

  /**
   * Checks {{name}}
   */
  {{checkerName}} (value: {{type}}) {
    {{#hasCandidates}}
    {{#isString}}
    if (![{{#candidates}}"{{.}}", {{/candidates}}].includes(value)) {
    {{/isString}}
    {{#isNumber}}
    if (![{{#candidates}}{{.}}, {{/candidates}}].includes(value)) {
    {{/isNumber}}
      throw new InvalidPropertyError(`${value} is not of candidates. ({{class}}.{{setterName}})`)
    }
    {{/hasCandidates}}
    {{#isUuid}}
    if (!isUuid(value)) {
      throw new InvalidPropertyError(`${value} is not UUID value. ({{class}}.{{setterName}})`)
    }
    {{/isUuid}}
    {{#isEmail}}
    if (!isEmail(value)) {
      throw new InvalidPropertyError(`${value} is not Email value. ({{class}}.{{setterName}})`)
    }
    {{/isEmail}}
    {{#isUrl}}
    if (!isUrl(value)) {
      throw new InvalidPropertyError(`${value} is not URL value. ({{class}}.{{setterName}})`)
    }
    {{/isUrl}}
    {{#minLength}}
    if (value.length < {{minLength}}) {
      throw new InvalidPropertyError(`${value} is shorter than {{minLength}}. ({{class}}.{{setterName}})`)
    }
    {{/minLength}}
    {{#maxLength}}
    if (value.length > {{maxLength}}) {
      throw new InvalidPropertyError(`${value} is longer than {{maxLength}}. ({{class}}.{{setterName}})`)
    }
    {{/maxLength}}
    {{#regex}}
    if (!/{{regex}}/.test(value)) {
      throw new InvalidPropertyError(`${value} does not match {{regex}}. ({{class}}.{{setterName}})`)
    }
    {{/regex}}
    {{#max}}
    if (value > {{max}}) {
      throw new InvalidPropertyError(`${value} is more than {{max}}. ({{class}}.{{setterName}})`)
    }
    {{/max}}
    {{#min}}
    if (value < {{min}}) {
      throw new InvalidPropertyError(`${value} is less than {{min}}. ({{class}}.{{setterName}})`)
    }
    {{/min}}
    {{#isInt}}
    if (value % 1 !== 0) {
      throw new InvalidPropertyError(`${value} is not an integer. ({{class}}.{{setterName}})`)
    }
    {{/isInt}}
    {{#customValidator}}
    if (!{{customValidator}}(value)) {
      throw new InvalidPropertyError(`${value} does not match the custom validator {{customValidator}}. ({{class}}.{{setterName}})`)
    }
    {{/customValidator}}
  }

  /**
   * Sets {{name}}
   * @param value
   */
  {{setterName}} (value: {{type}}{{#isArray}}[]{{/isArray}}) {
    {{#isArray}}
    for (let i  = 0; i < value.length; i++) {
      this.{{checkerName}}(value[i])
    }
    {{/isArray}}
    {{^isArray}}
    this.{{checkerName}}(value)
    {{/isArray}}
    this.#{{name}} = value
  }
  {{/props}}

  /**
   * Clones {{name}}
   */
  clone (shallow: boolean) {
    return new {{class}} (
      {{#props}}
      {{#isModel}}
      shallow ? this.{{getterName}}() : this.{{getterName}}().clone(false),
      {{/isModel}}
      {{^isModel}}
      this.{{getterName}}(),
      {{/isModel}}
      {{/props}}
    )
  }
}
